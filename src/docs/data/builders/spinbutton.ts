import { ATTRS, KBD, PROPS } from '$docs/constants';
import type { KeyboardSchema } from '$docs/types';
import { builderSchema, elementSchema } from '$docs/utils';
import type { BuilderData } from '.';

const OPTION_PROPS = [
	PROPS.DISABLED,
	{
		name: 'values',
		type: 'number[] | string[]',
		description: 'The values to display in the spinbutton.',
	},
	{
		name: 'steps',
		type: 'number',
		default: '4',
		description: 'The number of steps when doing large increments/decrements.',
	},
];

const BUILDER_NAME = 'spinbutton';

const builder = builderSchema(BUILDER_NAME, {
	title: 'createSpinbutton',
	props: [
		...OPTION_PROPS,
		{
			name: 'defaultValue',
			type: '<string | number>',
			description:
				'The default value of the spinbutton.',
		},
	],
	elements: [
		{
			name: 'root',
			description: 'The builder store used to create the spinbutton root.',
			link: '#root',
		},
		{
			name: 'label',
			description: 'The builder store used to create the spinbutton label.',
			link: '#label',
		},
		{
			name: 'content',
			description: 'The builder store used to create the spinbutton content.',
			link: '#content',
		},
		{
			name: 'increaseTrigger',
			description: 'The builder store used to create the spinbutton increase trigger.',
			link: '#increaseTrigger',
		},
		{
			name: 'decreaseTrigger',
			description: 'The builder store used to create the spinbutton decrease trigger.',
			link: '#decreaseTrigger',
		},
	],
	states: [
		{
			name: 'value',
			type: 'Writable<number | string>',
			description: 'A writable store with the current value of the spinbutton.',
		},
	],
	options: OPTION_PROPS,
});

const root = elementSchema('root', {
	description: 'Contains all the parts of the spinbutton.',
	dataAttributes: [
		{
			name: 'aria-labelledby',
			value: 'Used to reference the label of the spinbutton.',
		},
		{
			name: 'data-disabled',
			value: 'Present when the spinbutton is disabled.',
		},
		{
			name: 'data-melt-spinbutton',
			value: ATTRS.MELT('spinbutton'),
		},
	],
});

const label = elementSchema('label', {
	description: 'The label of the spinbutton.',
	dataAttributes: [
		{
			name: 'id',
			value: 'Label ID generated by Melt',
		},
	],
});

const content = elementSchema('content', {
	description: 'Contains the current value of the spinbutton.',
	dataAttributes: [
		{
			name: 'data-disabled',
			value: 'Present when the spinbutton is disabled.',
		},
		{
			name: 'aria-valuenow',
			value: 'A decimal value representing the current value of the spinbutton.',
		},
		{
			name: 'aria-valuemin',
			value: 'A decimal value representing the minumum value of the spinbutton.',
		},
		{
			name: 'aria-valuemax',
			value: 'A decimal value representing the maximum value of the spinbutton.',
		},
		{
			name: 'aria-invalid',
			value: 'Present if the current value of the spinbutton is outside the allowed range.',
		},
	],
});

const increaseTrigger = elementSchema('increaseTrigger', {
	description: 'The trigger for increasing the value of the spinbutton by 1 step.',
	dataAttributes: [
		{
			name: 'data-disabled',
			value: 'Present when the spinbutton is disabled.',
		},
		{
			name: 'data-melt-spinbutton-trigger-increase',
			value: ATTRS.MELT('trigger'),
		},
	],
});

const decreaseTrigger = elementSchema('decreaseTrigger', {
	description: 'The trigger for decreasing the value of the spinbutton by 1 step.',
	dataAttributes: [
		{
			name: 'data-disabled',
			value: 'Present when the spinbutton is disabled.',
		},
		{
			name: 'data-melt-spinbutton-trigger-decrease',
			value: ATTRS.MELT('trigger'),
		},
	],
});

const keyboard: KeyboardSchema = [
	{
		key: KBD.ARROW_UP,
		behavior: 'When the spinbutton has focus, increases the value by 1 step.',
	},
	{
		key: KBD.ARROW_DOWN,
		behavior: 'When the spinbutton has focus, decreases the value by 1 step.',
	},
	{
		key: KBD.PAGE_UP,
		behavior:
			'When the spinbutton has focus, increases the value by a step larger step than `Up Arrow`.',
	},
	{
		key: KBD.PAGE_DOWN,
		behavior:
			'When the spinbutton has focus, decreases the value by a step larger step than `Down Arrow`.',
	},
	{
		key: KBD.HOME,
		behavior: 'When the spinbutton has focus, sets the value to its minumum.',
	},
	{
		key: KBD.END,
		behavior: 'When the spinbutton has focus, sets the value to its maximum.',
	},
];

const schemas = [builder, root, label, content, increaseTrigger, decreaseTrigger];
const features = ['Full keyboard navigation'];

export const spinbuttonData: BuilderData = {
	schemas,
	features,
	keyboard,
};
